gps:
  delta_threshold_s: 1.0 # max time distance to the two measurements for interpolation.
  min_status: 0 # minimum status for a GPS to be valid
  max_sigma_xy: 5 # max xy sigma
  utm_reference:
    latitude: 38.275185
    longitude: -0.685623
    altitude: 160.0

odo:
  delta_threshold_s: 1.0 # max time distance to the two measurements for interpolation.

graphslam:
  delta_threshold_s: 1.0 # max time distance to the two measurements for interpolation.
#aruco:
#  delta_threshold_s: 0.05 # max time distance to associate aruco observations to a state (with a lidar time)
#  sigma_alpha: 2 # sigma for an ARUCO measurement. sigma degrees in the three angle rotations
#  sigma_xy: 0.05 # sigma for an ARUCO measurement. sigma meters for xy
#  sigma_z: 0.1 # sigma for an ARUCO measurement. sigma degrees in the three angle rotations

# the scanmatcher is used for sequential scanmatching and to find registrations between non-consecutive pointclouds
scanmatcher:
  d_poses: 0.3
  th_poses: 0.2

  # max time distance to find a valid odometry interpolation (given the lidar time, find odo)
  # a warning is issued and no odometry is interpolated
  delta_threshold_s: 1.0

  voxel_size: 0.05 # Number or null
#  voxel_size: 0.2

  # find the closest points within this distance in ICP
  icp_threshold: 5.0
  # filter points by radius
  min_radius: 0.3  #0.5 para no encontrarse con el robot
  max_radius: 15 #100
  # filter points by height
  min_height: -5.0
  max_height: 10.0
  min_reflectivity: 20

  # normal computation
  normals:
    max_nn_normals: 50 #50
    voxel_size_normals: 0.2 #0.5
  # options
  initial_transform:
    # the relative initial transform for registration. Consider that the height is always the same
    clouds_at_same_z: true
    # a delay in seconds to synchronize odometry and lidar info
    delay_seconds_lidar_odometry: 0.2


  threads:
    # process scanmatching between pointclouds every 0.35 seconds
    # should be approx. equal to the period between lidar scans
    seconds_period_scanmatching_thread: 0.5
    # publish the last transform 0.35 seconds
    seconds_period_publish_thread: 0.1
    # plot info in plot.png
    seconds_period_plot_info_thread: 1.0



#loop_closing:
#  # lazy settings, low number of loop closings
#  d_sample_i: 10.0 # try to find triplets for this relative distance between i poses
#  r_close1: 0.7 # the j index must be within r1 and r2 in travel distance
#  r_close2: 1.5
#  # include indices k that are within r_lc from i (and approximately from j) and r_lc_travel distance from i in terms
#  # of travel distance.
#  r_lc: 3.0 # radius for loop_closing (not travel distance)
#  r_lc_travel_distance: 3.0 # travelled distance for loop closings
#  num_triplets: 1 # num of triplets generated for each triplet at every step index

## medium settings, large number of loop closings, including
#  d_sample_i: 5.0 # try to find triplets for this relative distance between i poses
#  r_close1: 0.7 # the j index must be within r1 and r2 in travel distance
#  r_close2: 1.5
#  # include indices k that are within r_lc from i (and approximately from j) and r_lc_travel distance from i in terms
#  # of travel distance.
#  r_lc: 3.5 # radius for loop_closing (not travel distance)
#  r_lc_travel_distance: 3.0 # travelled distance for loop closings
#  num_triplets: 3 # num of triplets generated for each triplet at every step index

# epic settings, large number of loop closings, including
#  d_sample_i: 2.0 # try to find triplets for this relative distance between i poses
#  r_close1: 0.7 # the j index must be within r1 and r2 in travel distance
#  r_close2: 1.5
#   include indices k that are within r_lc from i (and approximately from j) and r_lc_travel distance from i in terms
#   of travel distance.
#  r_lc: 4.5 # radius for loop_closing (not travel distance)
#  r_lc_travel_distance: 3.0 # travelled distance for loop closings
#  num_triplets: 5 # num of triplets generated for each triplet at every step index

#map_viewer:
#  voxel_size: 0.2
#  keyframe_sampling: 20

