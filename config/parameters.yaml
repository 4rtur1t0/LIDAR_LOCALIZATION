

odo:
  delta_threshold_s: 1.0 # max time distance to the two measurements for interpolation.

graphslam:
  delta_threshold_s: 1.0 # max time distance to the two measurements for interpolation.
  #cte a new state whenever the odometry moves more than these thresholds
  d_poses: 0.3
  th_poses: 0.15
  skip_optimization: 40 # this goes with the frequency of the odometry. If odometry is at 20Hz, optimization is performed
                        # every two seconds
  # input raw odometry topic
  odometry_input_topic: '/husky_velocity_controller/odom'
  # the output from a local scanmatching node
  odometry_scanmatching_input_topic: '/odometry_lidar_scanmatching'
  map_sm_global_pose: '/map_sm_global_pose'
  # the output from a scanmatching to map node (global scanmatching)
  localized_pose_output_topic: '/localized_pose'

# the scanmatcher is used for sequential scanmatching and to find registrations between non-consecutive pointclouds
scanmatcher:
  odometry_input_topic: '/husky_velocity_controller/odom'
  # from a lidar
  pointcloud_input_topic: '/ouster/points_low_rate'
  # the output estimated odometry from local scanmatching
  odometry_output_topic: '/odometry_lidar_scanmatching'
  # distance in odometry to compute a local scanmatching
  d_poses: 0.1
  th_poses: 0.05
  # max time distance to find a valid odometry interpolation (given the lidar time, find odo)
  # a warning is issued and no odometry is interpolated
  delta_threshold_s: 1.0
  voxel_size: 0.05 # Number or null
  # find the closest points within this distance in ICP
  icp_threshold: 5.0
  # filter points by radius
  min_radius: 0.3  #0.5 para no encontrarse con el robot
  max_radius: 15 #100
  # filter points by height
  min_height: -5.0
  max_height: 10.0
  min_reflectivity: 20

  # normal computation
  normals:
    max_nn_normals: 50 #50
    voxel_size_normals: 0.2 #0.5
  # options
  initial_transform:
    # the relative initial transform for registration. Consider that the height is always the same
    clouds_at_same_z: true
    # a delay in seconds to synchronize odometry and lidar info
    delay_seconds_lidar_odometry: 0.2

scanmatcher_to_map:
  # from a lidar
  pointcloud_input_topic: '/ouster/points_low_rate'
  # the input localized pose
  localized_pose_input_topic: '/localized_pose'
  # the localized pose is scanmatched to the global map and this is the output
  map_sm_prior_output_topic: '/map_sm_global_pose'
  # the node also publishes the global map, as read from the file
  global_map: '/global_map'
  # the map filename
  map_filename: 'map_data/global_map.pcd'

gps:
  delta_threshold_s: 1.0 # max time distance to the two measurements for interpolation.
  min_status: 0 # minimum status for a GPS to be valid
  max_sigma_xy: 5 # max xy sigma
  utm_reference:
    latitude: 38.275185
    longitude: -0.685623
    altitude: 160.0

